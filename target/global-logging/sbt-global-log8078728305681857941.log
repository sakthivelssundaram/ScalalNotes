[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\sakthivel.s\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\sakthivel.s\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Amazon.com Inc. Java 1.8.0_322)
[debug]       Load.loadUnit: plugins took 157.0226ms
[debug]       Load.loadUnit: defsScala took 0.9175ms
[debug] [Loading] Scanning directory C:\Users\sakthivel.s\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sakthivel.s\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 29.7752 ms
[debug]           Load.resolveProject(global-plugins) took 92.2936ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\sakthivel.s\.sbt\1.0\plugins, plugins: List(<none>))) took 172.7152ms
[debug] [Loading] Done in C:\Users\sakthivel.s\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 212.3008ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.506ms
[debug]     Load.loadUnit(file:/C:/Users/sakthivel.s/.sbt/1.0/plugins/, ...) took 390.4383ms
[debug]   Load.apply: load took 951.7048ms
[debug]   Load.apply: resolveProjects took 9.3438ms
[debug]   Load.apply: finalTransforms took 86.8693ms
[debug]   Load.apply: config.delegates took 18.3446ms
[debug]   Load.apply: Def.make(settings)... took 626.9679ms
[debug]   Load.apply: structureIndex took 145.2039ms
[debug]   Load.apply: mkStreams took 2.4318ms
[info] loading global plugins from C:\Users\sakthivel.s\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 35072.1641ms
[debug]           Load.loadUnit: plugins took 47.8966ms
[debug]           Load.loadUnit: defsScala took 0.0055ms
[debug] [Loading] Scanning directory C:\Users\sakthivel.s\IdeaProjects\ScalalNotes\project
[debug]             Load.loadUnit: mkEval took 38.6493ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sakthivel.s\IdeaProjects\ScalalNotes\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.3332 ms
[info] loading settings for project scalalnotes-build from idea1.sbt ...
[debug]               Load.resolveProject(scalalnotes-build) took 52.3925ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalalnotes-build, base: C:\Users\sakthivel.s\IdeaProjects\ScalalNotes\project, plugins: List(<none>))) took 66.8641ms
[debug] [Loading] Done in C:\Users\sakthivel.s\IdeaProjects\ScalalNotes\project, returning: (scalalnotes-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 7976.8681ms
[debug]           Load.loadUnit: cleanEvalClasses took 15.8764ms
[debug]         Load.loadUnit(file:/C:/Users/sakthivel.s/IdeaProjects/ScalalNotes/project/, ...) took 8042.9925ms
[debug]       Load.apply: load took 8049.1522ms
[debug]       Load.apply: resolveProjects took 1.128ms
[debug]       Load.apply: finalTransforms took 50.7901ms
[debug]       Load.apply: config.delegates took 0.5235ms
[debug]       Load.apply: Def.make(settings)... took 295.2848ms
[debug]       Load.apply: structureIndex took 63.7886ms
[debug]       Load.apply: mkStreams took 0.0124ms
[info] loading project definition from C:\Users\sakthivel.s\IdeaProjects\ScalalNotes\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 13140.2411ms
[debug]     Load.loadUnit: defsScala took 0.0046ms
[debug] [Loading] Scanning directory C:\Users\sakthivel.s\IdeaProjects\ScalalNotes
[debug]       Load.loadUnit: mkEval took 0.4165ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\sakthivel.s\IdeaProjects\ScalalNotes, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6858 ms
[info] loading settings for project scalalnotes from build.sbt ...
[debug]         Load.resolveProject(scalalnotes) took 65.7383ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scalalnotes, base: C:\Users\sakthivel.s\IdeaProjects\ScalalNotes, plugins: List(<none>))) took 70.3977ms
[debug] [Loading] Done in C:\Users\sakthivel.s\IdeaProjects\ScalalNotes, returning: (scalalnotes)
[debug]     Load.loadUnit: loadedProjectsRaw took 3607.9371ms
[debug]     Load.loadUnit: cleanEvalClasses took 27.7617ms
[debug]   Load.loadUnit(file:/C:/Users/sakthivel.s/IdeaProjects/ScalalNotes/, ...) took 16777.2645ms
[debug] Load.apply: load took 16780.3975ms
[debug] Load.apply: resolveProjects took 0.2439ms
[debug] Load.apply: finalTransforms took 49.1597ms
[debug] Load.apply: config.delegates took 0.4364ms
[debug] Load.apply: Def.make(settings)... took 142.2621ms
[debug] Load.apply: structureIndex took 38.2868ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to HandsOnWithScala (in build file:/C:/Users/sakthivel.s/IdeaProjects/ScalalNotes/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62485 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62485, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to HandsOnWithScala (in build file:/C:/Users/sakthivel.s/IdeaProjects/ScalalNotes/)
[debug] > Exec(idea-shell, None, None)
